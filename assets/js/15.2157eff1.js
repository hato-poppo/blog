(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{445:function(e,t,a){"use strict";a.r(t);var n=a(2),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"frontmatter-title"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),a("h2",{attrs:{id:"目的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目的"}},[e._v("#")]),e._v(" 目的")]),e._v(" "),a("p",[e._v("既存のGemモジュールを使ってパスワード認証とLDAP認証の両方をサポートする方法について調べた。\n前提として、RailsアプリケーションはAPIモードで作成している。")]),e._v(" "),a("h2",{attrs:{id:"背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[e._v("#")]),e._v(" 背景")]),e._v(" "),a("p",[e._v("趣味で作ってるRails APIの認証機能を実装するところに差し掛かった。\n今まではJWT等を使って自力で実装していたが、今回は既存のGemモジュールを使ってみようかと考えた。")]),e._v(" "),a("p",[e._v("既存のGemなら導入が楽だしセキュリティ面の実装もしっかりしてそう")]),e._v(" "),a("p",[e._v("最有力候補は「Devise」\n厳密に言うと「Devise Token Auth」")]),e._v(" "),a("h2",{attrs:{id:"結論"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#結論"}},[e._v("#")]),e._v(" 結論")]),e._v(" "),a("p",[e._v("今まで通り自力で実装した方が良いんじゃないかと思った。")]),e._v(" "),a("h2",{attrs:{id:"理由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理由"}},[e._v("#")]),e._v(" 理由")]),e._v(" "),a("p",[e._v("→　LDAP認証用のモジュールがメンテされてないのが気になる\nパスワード認証とLDAP認証の併用に対応してないって書いてる")]),e._v(" "),a("p",[e._v("メンテされてないGemに依存したり、トリッキーな実装になるくらいなら自作した方がよくない？っていう結論")]),e._v(" "),a("p",[e._v("徳丸本とやらを読んでみるべきかな")]),e._v(" "),a("h2",{attrs:{id:"調べたこと"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#調べたこと"}},[e._v("#")]),e._v(" 調べたこと")]),e._v(" "),a("p",[e._v("まず、"),a("a",{attrs:{href:"https://github.com/heartcombo/devise",target:"_blank",rel:"noopener noreferrer"}},[e._v("Devise"),a("OutboundLink")],1),e._v(" をAPIモードで使う方法を調べた。\nDeviseは非APIモードに対応している為、フロントエンド部分の生成も前提となっており、今開発しているAPIとは合わない。\nググって出てきたのは "),a("a",{attrs:{href:"https://github.com/lynndylanhurley/devise_token_auth",target:"_blank",rel:"noopener noreferrer"}},[e._v("Devise Token Auth"),a("OutboundLink")],1),e._v(" だった。\nこれはAPIモード用のGemらしい。")]),e._v(" "),a("p",[e._v("次は Devise Token Auth について調べた。\n特に気になるところはない。\nスター数も多く、活発にメンテされているようだった。")]),e._v(" "),a("p",[e._v("あとはLDAP認証が実現できるかどうかを確認する必要がある。\nパスワード認証との併用ができるかどうかも重要。")]),e._v(" "),a("p",[e._v("Devise で LDAP認証をサポートする方法で調べてみると以下のGemがヒットした\n"),a("a",{attrs:{href:"https://github.com/cschiewek/devise_ldap_authenticatable",target:"_blank",rel:"noopener noreferrer"}},[e._v("cschiewek/devise_ldap_authenticatable: Devise Module for LDAP"),a("OutboundLink")],1),e._v("\nリリースのタグ付けを見てメンテされていないのかと思っていたけど、RubyGems.org で見てみるとちゃんとメンテされてそうだった\n"),a("a",{attrs:{href:"https://rubygems.org/gems/devise_ldap_authenticatable/versions/0.8.7",target:"_blank",rel:"noopener noreferrer"}},[e._v("devise_ldap_authenticatable | RubyGems.org | コミュニティのGemホスティングサービス"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("しかしREADME.mdに")]),e._v(" "),a("blockquote",[a("p",[e._v("Devise LDAP Authenticatable works in replacement of Database Authenticatable. This devise plugin has not been tested with DatabaseAuthenticatable enabled at the same time. This is meant as a drop in replacement for DatabaseAuthenticatable allowing for a semi single sign on approach.\nと記載されていた。\nどうやらパスワード認証とLDAP認証の両方をサポートできるわけではないようだ。\n別の方法を探してみる。")])]),e._v(" "),a("p",[e._v("Devise Token AuthのIssueでちょうど良いものを見つけた。\n"),a("a",{attrs:{href:"https://github.com/lynndylanhurley/devise_token_auth/issues/759",target:"_blank",rel:"noopener noreferrer"}},[e._v("devise_token_auth with LDAP? · Issue #759 · lynndylanhurley/devise_token_auth"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("OmniAuth がLDAP認証をサポートしているとのこと\nそもそもOmniAuthについてちゃんと知らないので先に調べる必要があるよね\nどうやらOAuthのラッパーモジュールがOmniAuthらしい。")]),e._v(" "),a("p",[e._v("Devise Token Authの公式に、OmniAuthについての記述があったので再度確認\n"),a("a",{attrs:{href:"https://devise-token-auth.gitbook.io/devise-token-auth/config/omniauth",target:"_blank",rel:"noopener noreferrer"}},[e._v("OmniAuth - devise-token-auth"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("サポートしているプロバイダーの一覧がある\n"),a("a",{attrs:{href:"https://github.com/omniauth/omniauth/wiki/List-of-Strategies",target:"_blank",rel:"noopener noreferrer"}},[e._v("List of Strategies · omniauth/omniauth Wiki"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("LDAP認証用のモジュールはこいつらしい\n"),a("a",{attrs:{href:"https://github.com/omniauth/omniauth-ldap",target:"_blank",rel:"noopener noreferrer"}},[e._v("omniauth/omniauth-ldap: LDAP strategy for OmniAuth"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("お世辞にも活発とは言えない。\nが、これくらいなら許容範囲と言えるのだろうか。")]),e._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/jwt/ruby-jwt",target:"_blank",rel:"noopener noreferrer"}},[e._v("jwt/ruby-jwt: A ruby implementation of the RFC 7519 OAuth JSON Web Token (JWT) standard."),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"背景-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背景-2"}},[e._v("#")]),e._v(" 背景")]),e._v(" "),a("p",[e._v("そもそもの両方をサポートする仕組みについて\n→　テスト用ユーザーに既存のユーザーを使いたくないから")]),e._v(" "),a("p",[e._v("前提となる環境ではテスト用のユーザーをこちらで自由に追加できないという難点がある\n→　結局、LDAP認証でのユーザーの追加テストが不十分になっているんじゃないかっていう気づきがあった")])])}),[],!1,null,null,null);t.default=r.exports}}]);