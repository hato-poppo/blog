(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{467:function(t,a,r){"use strict";r.r(a);var s=r(2),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"frontmatter-title"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),r("h2",{attrs:{id:"目的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#目的"}},[t._v("#")]),t._v(" 目的")]),t._v(" "),r("p",[t._v("元記事参照")]),t._v(" "),r("h2",{attrs:{id:"背景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),r("p",[t._v("元記事参照")]),t._v(" "),r("h2",{attrs:{id:"single-responsibility-principle-とは"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#single-responsibility-principle-とは"}},[t._v("#")]),t._v(" Single responsibility principle とは")]),t._v(" "),r("p",[t._v("単一責任の原則")]),t._v(" "),r("blockquote",[r("p",[t._v("<原文>\nA class should have only one reason to change（クラスが変更される理由は1つだけであるべき）")])]),t._v(" "),r("h3",{attrs:{id:"解釈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解釈"}},[t._v("#")]),t._v(" 解釈")]),t._v(" "),r("p",[t._v("1つのクラスは1つの責任（＝役割）しか持たないようにする。"),r("br"),t._v("\nこれはクラスに限った話ではなく、モジュールやメソッドも同様である。")]),t._v(" "),r("h3",{attrs:{id:"目的-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#目的-2"}},[t._v("#")]),t._v(" 目的")]),t._v(" "),r("p",[t._v("可読性、保守性を高くする為。")]),t._v(" "),r("p",[t._v("複数の責任を持っている場合、ある機能のために入れた変更が他の機能にも影響を与えてしまう危険性が高くなる。"),r("br"),t._v("\n責任を1つに絞ることにより意図せぬ影響を防ぎ、変更に強くなる。")]),t._v(" "),r("p",[t._v("他にも")]),t._v(" "),r("ul",[r("li",[t._v("複数の責任を持っているときよりも処理がシンプルになる")]),t._v(" "),r("li",[t._v("クラスやメソッドの名前からどんな役割を持っているか推測しやすくなる")])]),t._v(" "),r("p",[t._v("といったメリットがある。")])])}),[],!1,null,null,null);a.default=e.exports}}]);